#lang sicp
(define (make-frame vars vals)
  (define (helper va vl)
     (if (null? va)
      nil
      (cons (cons (car va) (car vl))
            (helper (cdr va) (cdr vl)))))
  (if (eq? (length vars) (length vals))
      (helper vars vals)
      (error "number of vars and vals not match")))
(define (frame env)
  (car env))
(define (add-binding-to-frame! var val frame)
  (set! frame (cons (cons var val) frame)))
(define (extand-environment vars vals base-env)
  (cons (make-frame vars vals) base-env))
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan pairs)
      (cond ((null? pairs)
             (env-loop (enclosing-environment env)))
            ((eq? var (caar pairs))
             (cdar pairs))
            (else (scan (cdr pairs)))))
    (if (eq? env the-empty-enviroment)
        (error "unbound variable" var)
        (scan(frame env)))
  (env-loop env))
(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan pairs)
      (cond ((null? pairs)
             (env-loop (enclosing-environment env)))
            ((eq? var (caar pairs))
             (set-cdr! (car pairs) val))
            (else (scan (cdr pairs)))))
    (if (eq? env the-empty-enviroment)
        (error "unbound variable" var)
        (scan pairs))))
(define (define-variable! var val env)
  (define (scan pairs)
    (cond ((null? pairs)
           (add-binding-to-frame! var val pairs))
          ((eq? var (caar pairs))
           (set-cdr! (car pairs) val))
          (else (scan (cdr pairs)))))
  (scan (frame env)))
