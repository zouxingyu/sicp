#lang sicp
(#%require "put_get.rkt")
(define table (make-table))
(define put (table 'put))
(define get (table 'get))
(put 'op 'quote text-of-quotation) 
(put 'op 'set! eval-assignment) 
(put 'op 'define eval-definition) 
(put 'op 'if eval-if) 
(put 'op 'lambda (lambda (x y)  
                   (make-procedure (lambda-parameters x) (lambda-body x) y))) 
(put 'op 'begin (lambda (x y)  
                  (eval-sequence (begin-sequence x) y))) 
(put 'op 'cond (lambda (x y)  
                 (evaln (cond->if x) y))) 
(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((get 'op (car exp)) ((get 'op (car exp)) exp env))
        ((application? exp) 
          (apply (eval (operator exp) env) 
                 (list-of-values (operands exp) env))) 
         (else 
          (error "Unknown expression type -- EVAL" exp)))) 