#lang sicp
(define (let? exp) (tagged-list? exp 'let))
(define (let-vars exp)  (map car (cadr exp)))
(define (let-exps exp)  (map cadr (cadr exp)))
(define (let-body exp) (cddr exp))
(define (name-let? exp)
  (variable? (cadr exp)))
(define (name-let-func-name exp)
  (cadr exp))
(define (name-let-parms exp)
  (map car (caddr exp)))
(define (name-let-args exp)
   (map cdr (caddr exp)))
(define (name-let-body exp)
  (cdddr exp))
(define (name-let->func exp)
  (list 'define
        (cons (name-let-func-name exp)
              (name-let-parms exp))
        (name-let-body exp)))
(define (let->combination exp)
  (if (name-let? exp)
      (sequence->exp
       (list (name-let->func exp)
             (cons (name-let-func-name exp) (name-let-func-par args)))
  (cons (make-lambda (let-vars exp) (let-body exp))
        (let-exps exp)))
((let? exp) (eval (let-combination exp) env))