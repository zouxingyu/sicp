#lang sicp
(define (square x) (* x x))
(define (estimate-pi trials)
  (* 4 (monte-carlo trials test)))
(define (predicate x y)
  (not (> (+ (square x) (square y)) 1)))
(define (test)
  (predicate (random-in-range -1.0 1.0) (random-in-range -1.0 1.0)))
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
(define (monte-carlo trials test)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0) (/ trials-passed trials))
          ((test) (iter (- trials-remaining 1) (+ trials-passed 1)))
          (else (iter (- trials-remaining 1) trials-passed))))
  (iter trials 0))
;;test
(exact->inexact (estimate-pi 1000000))