#lang sicp
(define (make-queue) 
  (let ((front-ptr nil)
        (rear-ptr nil))
    (define (empty-queue?) (eq? front-ptr nil))
    (define (front-queue)
      (if (empty-queue?)
          (error "empty queue")
          (car front-ptr)))
    (define (insert-queue! item)
      (let ((newpair (cons item nil)))
        (if (empty-queue?)
            (begin (set! front-ptr newpair)
                   (set! rear-ptr newpair)
                   (print-queue))
            (begin  (set-cdr! rear-ptr newpair)
                    (set! rear-ptr newpair)
                    (print-queue)))))
    (define (delete-queue!)
      (if (empty-queue?)
          (error "empty queue")
          (begin (set! front-ptr (cdr front-ptr))
                 (print-queue))))
    (define (print-queue)
      (display "(")
      (define (iter ptr)
        (if (null? ptr)
            (display ")")
            (begin (display (car ptr))
                   (iter (cdr ptr)))))
      (iter front-ptr)
      (newline))
    (define (dispatch msg)
      (cond ((eqv? msg 'empty-queue?) empty-queue?)
            ((eqv? msg 'insert-queue!) insert-queue!)
            ((eqv? msg 'delete-queue!) delete-queue!)
            ((eqv? msg 'front-queue) front-queue)))
    dispatch))
;;test
(define q (make-queue))
((q 'insert-queue!) 'a)
((q 'insert-queue!) 'b)
((q 'delete-queue!))
((q 'front-queue))