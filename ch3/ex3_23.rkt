#lang sicp
(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item) (set-car! queue item))
(define (set-rear-ptr! queue item) (set-cdr! queue item))

(define (empty-queue? queue) (eq? (front-ptr queue) nil))
(define (make-queue) (cons nil nil))
(define (front-queue queue)
  (if (empty-queue? queue)
      (error "empty queue")
      (car (car (front-ptr queue)))))
(define (rear-queue queue)
  (if (empty-queue? queue)
      (error "empty queue")
      (car (car (rear-ptr queue)))))
(define (front-insert-queue! queue item)
 (let ((newpair (cons (cons item nil) nil)))
   (if (empty-queue? queue)
       (begin (set-front-ptr! queue newpair)
              (set-rear-ptr! queue newpair)
              (print-queue queue))
      (begin  (set-cdr! newpair (front-ptr queue))
              (set-cdr! (car (front-ptr queue)) newpair)
              (set-front-ptr! queue newpair)
              (print-queue queue)))))
(define (rear-insert-queue! queue item)
 (let ((newpair (cons (cons item nil) nil)))
   (if (empty-queue? queue)
       (begin (set-front-ptr! queue newpair)
              (set-rear-ptr! queue newpair)
              (print-queue queue))
      (begin  (set-cdr! (rear-ptr queue) newpair)
              (set-cdr! (car newpair) (rear-ptr queue))
              (set-rear-ptr! queue newpair)
              (print-queue queue)))))
(define (front-delete-queue! queue)
  (if (empty-queue? queue)
      (error "empty queue")
      (begin (set-front-ptr! queue (cdr (front-ptr queue)))
             (if (not (empty-queue? queue)) (set-cdr! (car (front-ptr queue)) nil))
             (print-queue queue))))
(define (rear-delete-queue! queue)
  (if (empty-queue? queue)
      (error "empty queue")
      (begin (set-rear-ptr! queue (cdr (car (rear-ptr queue))))
             (if (null? (rear-ptr queue)) (set-front-ptr! queue nil) (set-cdr! (rear-ptr queue) nil))
             (print-queue queue))))
(define (print-queue queue)
  (display "(")
  (define (iter ptr)
    (if (null? ptr)
        (display  ")")
        (begin  (display (car (car ptr)))
               (iter (cdr ptr)))))
  (iter (front-ptr queue))
  (newline))


;;test
(define q (make-queue))
(front-insert-queue! q 'a)
(front-insert-queue! q 'b)
(rear-insert-queue! q 'c)
(front-delete-queue! q)
(rear-delete-queue! q)
(front-delete-queue! q)
(front-insert-queue! q 'a)


