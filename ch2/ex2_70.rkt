#lang sicp
(define (generate-huffman-tree pairs)
  (successive-merge (make-leaf-set pairs)))
(define (successive-merge pairs)
  (if (eqv? (length pairs) 1)
      (car pairs)
      (let ((newpairs (sort (append (list (make-code-tree (car pairs) (cadr pairs))) (cddr pairs)))))
        (successive-merge newpairs))))
(define (sort l)
  (if (null? l) nil
      (adjoin-set (car l) (sort (cdr l)))))

(define (make-leaf-set pairs)
  (if (null? pairs)
      nil
      (let ((pair (car pairs)))
        (adjoin-set (make-leaf (car pair)
                               (cadr pair))
                    (make-leaf-set (cdr pairs))))))
(define (adjoin-set x l)
  (cond  ((null? l) (list x))
      ((< (weight x) (weight (car l))) (cons x l))
      (else (cons (car l) (adjoin-set x (cdr l))))))

(define (encode-symbol bit tree)
  (define (iter result t)
    (cond ((leaf? t) (if (eq? (symbol-leaf t) bit) result #f))
          (else (let ((lr (iter (append result (list 0)) (left-branch t)))
                      (rr (iter (append result (list 1)) (right-branch t))))
                  (if (eq? rr #f) lr rr)))))
  (iter nil tree))
(define (encode message tree)
  (if (null? message) '()
      (append (encode-symbol (car message) tree) (encode (cdr message) tree))))

(define (make-leaf symbol weight)
  (list 'leaf symbol weight))
(define (leaf? x)
  (eq? (car x) 'leaf))
(define (symbol-leaf x)
  (cadr x))
(define (weight-leaf x)
  (caddr x))

(define (make-code-tree left right)
  (list left right (append (symbols left) (symbols right)) (+ (weight left) (weight right))))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
  (if (leaf? tree) (list (symbol-leaf tree)) (caddr tree)))
(define (weight tree)
  (if (leaf? tree) (weight-leaf tree) (cadddr tree)))

;;test
(define tree (generate-huffman-tree '((get 2) (a 2) (job 2) (boom 1) (na 1) (sha 3) (yip 9) (wah 1))))
(encode '(get a job) tree)