#lang sicp
(define (make-leaf symbol weight)
  (list 'leaf symbol weight))
(define (leaf? x)
  (eq? (car x) 'leaf))
(define (symbol-leaf x)
  (cadr x))
(define (weight-leaf x)
  (caddr x))

(define (make-code-tree left right)
  (list left right (append (symbols left) (symbols right)) (+ (weight left) (weight right))))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
  (if (leaf? tree) (list (symbol-leaf tree)) (caddr tree)))
(define (weight tree)
  (if (leaf? tree) (weight-leaf tree) (cadddr tree)))

(define (generate-huffman-tree pairs)
  (successive-merge (make-leaf-set pairs)))
(define (successive-merge pairs)
  (if (eqv? (length pairs) 1)
      (car pairs)
      (let ((newpairs (sort (append (list (make-code-tree (car pairs) (cadr pairs))) (cddr pairs)))))
        (successive-merge newpairs))))
(define (sort l)
  (if (null? l) nil
      (adjoin-set (car l) (sort (cdr l)))))

(define (make-leaf-set pairs)
  (if (null? pairs)
      nil
      (let ((pair (car pairs)))
        (adjoin-set (make-leaf (car pair)
                               (cadr pair))
                    (make-leaf-set (cdr pairs))))))
(define (adjoin-set x l)
  (cond  ((null? l) (list x))
      ((< (weight x) (weight (car l))) (cons x l))
      (else (cons (car l) (adjoin-set x (cdr l))))))
;;test
(define pairs '((a 4) (b 2) (c 1) (d 1)))
(generate-huffman-tree pairs)