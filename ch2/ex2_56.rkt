#lang sicp
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (add1 exp) var)
                   (deriv (add2 exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multi1 exp)
                        (deriv (multi2 exp) var))
          (make-product (deriv (multi1 exp) var)
                        (multi2 exp))))
        ((expo? exp)
         (make-product (exponent exp)
                       (make-product (make-expo (base exp) (- (exponent exp) 1))
                                     (deriv (base exp) var))))
        (else (error "unkonw" exp))))

(define variable? symbol?)
(define (same-variable? e1 e2) (eq? (variable? e1) (variable? e2)))
(define (sum? e) (and (pair? e) (eq? (car e) '+)))
(define (make-sum e1 e2)
  (cond ((=number? e1 0) e2)
        ((=number? e2 0) e1)
        ((and (number? e1) (number? e2)) (+ e1 e2))
        (else (list '+ e1 e2))))
(define (add1 e) (cadr e))
(define (add2 e) (caddr e))
(define (product? e) (and (pair? e) (eq? (car e) '*)))
(define (make-product e1 e2)
  (cond ((or (=number? e1 0) (=number? e2 0)) 0)
        ((=number? e1 1) e2)
        ((=number? e2 1) e1)
        ((and (number? e1) (number? e2)) (* e1 e2))
        (else (list '* e1 e2))))
(define (multi1 e) (cadr e))
(define (multi2 e) (caddr e))
(define (expo? e)  (and (pair? e) (eq? (car e) '**)))
(define (make-expo b e)
  (cond ((=number? e 0) 1)
        ((=number? e 1) b)
        (else (list '** b e))))
(define (base e) (cadr e))
(define (exponent e) (caddr e))
(define (=number? e n) (and (number? e) (= e n)))

(deriv '(+ x 3) 'x)
(deriv '(** x 1) 'x)