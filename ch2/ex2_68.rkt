#lang sicp
(define (encode-symbol bit tree)
  (define (iter result t)
    (cond ((leaf? t) (if (eq? (symbol-leaf t) bit) result #f))
          (else (let ((lr (iter (append result (list 0)) (left-branch t)))
                      (rr (iter (append result (list 1)) (right-branch t))))
                  (if (eq? rr #f) lr rr)))))
  (iter nil tree))
(define (encode message tree)
  (if (null? message) '()
      (append (encode-symbol (car message) tree) (encode (cdr message) tree))))
(define (make-leaf symbol weight)
  (list 'leaf symbol weight))
(define (leaf? x)
  (eq? (car x) 'leaf))
(define (symbol-leaf x)
  (cadr x))
(define (weight-leaf x)
  (caddr x))

(define (make-code-tree left right)
  (list left right (append (symbols left) (symbols right)) (+ (weight left) (weight right))))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
  (if (leaf? tree) (list (symbol-leaf tree)) (caddr tree)))
(define (weight tree)
  (if (leaf? tree) (weight-leaf tree) (cadddr tree)))

(define sample-tree
  (make-code-tree (make-leaf 'a 4)
                  (make-leaf 'b 1)))
;;test
(encode '(a b b) sample-tree)